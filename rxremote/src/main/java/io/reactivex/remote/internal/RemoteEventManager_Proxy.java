package io.reactivex.remote.internal;

import android.os.IBinder;
import android.os.RemoteException;

/**
 * Wraps a remote {@link IBinder} that implements {@link RemoteEventManager} interface
 * <p>
 * Autogenerated by <a href="https://bit.ly/Remoter">Remoter</a>
 *
 * @see RemoteEventManager_Stub
 */
public class RemoteEventManager_Proxy implements RemoteEventManager {
    private static final String DESCRIPTOR = "polycom.conference.RemoteEventManager";

    private static final int TRANSACTION_subscribe_0 = android.os.IBinder.FIRST_CALL_TRANSACTION + 0;

    private static final int TRANSACTION_unsubscribe_1 = android.os.IBinder.FIRST_CALL_TRANSACTION + 1;

    private IBinder mRemote;

    /**
     * Initialize this {@link RemoteEventManager_Proxy} with the given {@link IBinder}
     *
     * @param binder An {@link IBinder} that exposes a remote {@link RemoteEventManager}
     */
    public RemoteEventManager_Proxy(IBinder binder) {
        this.mRemote = binder;
    }

    @Override
    public void subscribe(RemoteEventListener listener) {
        android.os.Parcel data = android.os.Parcel.obtain();
        android.os.Parcel reply = android.os.Parcel.obtain();
        try {
            data.writeInterfaceToken(DESCRIPTOR);
            data.writeStrongBinder(new RemoteEventListener_Stub(listener));
            mRemote.transact(TRANSACTION_subscribe_0, data, reply, 0);
            reply.readException();
        } catch (RemoteException re) {
            throw new RuntimeException(re);
        } finally {
            reply.recycle();
            data.recycle();
        }
    }

    @Override
    public void unsubscribe() {
        android.os.Parcel data = android.os.Parcel.obtain();
        android.os.Parcel reply = android.os.Parcel.obtain();
        try {
            data.writeInterfaceToken(DESCRIPTOR);
            mRemote.transact(TRANSACTION_unsubscribe_1, data, reply, 0);
            reply.readException();
        } catch (RemoteException re) {
            throw new RuntimeException(re);
        } finally {
            reply.recycle();
            data.recycle();
        }
    }
}
